# this script is sourced as part of the looker startup script
# blame: barry@productops.com jan 2016
# BOLT-1611 deploy a looker jar via Sagoku
# /home/looker/looker/lookerstart.cfg

# looker recommends leaving 1.5G for "everything else"
MEM=`cat /proc/meminfo | grep MemTotal | awk '{print $2}'`
G6=6000000
G3=3000000
G1=1500000
# but they don't know all the other crap that runs in a sagoku instance
if [ $MEM -gt $G6 ] ; then 
# if we've got more than 6G then leave 3G for the rest
JM=`expr $MEM - $G3`   
elif [ $MEM -gt $G3 ] ; then
# if we've got more than 3G then leave the recommended 1.5G
JM=`expr $MEM - $G1`   
else 
# if we've got less than 3G total, then leave half for the rest
# This Will Likely Result In A Failing Looker Box.  YOU HAVE BEEN WARNED.
JM=`expr $MEM / 2`   
fi
# okay, now set the memory arg
JAVAMEM="${JM}k"

# these are the args that sagoku gives tomcat
CATALINA_JARGS="-Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -XX:PermSize=96m -XX:MaxPermSize=128m -XX:HeapDumpPath=/var/lib/tomcat/temp"
# these are the args that spencer gives eme
EME_JARGS="-Djava.security.egd=file:/dev/./urandom -XX:+CMSClassUnloadingEnabled -XX:+CMSConcurrentMTEnabled -XX:+CMSParallelRemarkEnabled -XX:+DisableExplicitGC -XX:+HeapDumpOnOutOfMemoryError -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:CMSFullGCsBeforeCompaction=1 -XX:CMSInitiatingOccupancyFraction=5 -XX:MaxNewSize=300m -XX:MaxPermSize=128m -XX:NewSize=300m"

# we rely on postinst to pick up some stuff from the environment and write them to the top of this script.
JAVAARGS="$APP_DYNAMICS_VARS $EME_JARGS"
LOOKERARGS="--no-ssl"


